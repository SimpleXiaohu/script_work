
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor)))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor)) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor)) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor)))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor)) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor)) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor)))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor)) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ (re.++ (re.++ (re.*? re.allchar) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "i")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "m")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "s")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "x")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "e")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "A")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "D")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "S")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "U")) (re.inter (re.diff (re.range "\x01" "\xff") (str.to.re "X")) (re.diff (re.range "\x01" "\xff") (str.to.re "u"))))))))))))) ((_ re.capture 1) (re.* (re.union (str.to.re "i") (re.union (str.to.re "m") (re.union (str.to.re "s") (re.union (str.to.re "x") (re.union (str.to.re "e") (re.union (str.to.re "A") (re.union (str.to.re "D") (re.union (str.to.re "S") (re.union (str.to.re "U") (re.union (str.to.re "X") (str.to.re "u")))))))))))))) re.end-anchor))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
