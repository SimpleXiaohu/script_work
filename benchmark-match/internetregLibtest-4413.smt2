
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor))) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor))) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor))))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor))) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.union (re.union (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 1) (re.++ (re.union (str.to.re "A") (re.union (str.to.re "a") (re.union (str.to.re "B") (re.union (str.to.re "b") (re.union (str.to.re "C") (re.union (str.to.re "c") (re.union (str.to.re "E") (re.union (str.to.re "e") (re.union (str.to.re "G") (re.union (str.to.re "g") (re.union (str.to.re "H") (re.union (str.to.re "h") (re.union (str.to.re "J") (re.union (str.to.re "j") (re.union (str.to.re "K") (re.union (str.to.re "k") (re.union (str.to.re "L") (re.union (str.to.re "l") (re.union (str.to.re "M") (re.union (str.to.re "m") (re.union (str.to.re "N") (re.union (str.to.re "n") (re.union (str.to.re "P") (re.union (str.to.re "p") (re.union (str.to.re "R") (re.union (str.to.re "r") (re.union (str.to.re "S") (re.union (str.to.re "s") (re.union (str.to.re "T") (re.union (str.to.re "t") (re.union (str.to.re "V") (re.union (str.to.re "v") (re.union (str.to.re "X") (re.union (str.to.re "x") (re.union (str.to.re "Y") (str.to.re "y")))))))))))))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 2) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "a" "z") (re.range "A" "Z")) (re.range "0" "9")))) (re.* (str.to.re " "))))))))) re.end-anchor) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 3) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.* (str.to.re " "))))) re.end-anchor)) (re.++ (re.++ re.begin-anchor (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 4) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9")))))) (re.++ (re.* (str.to.re " ")) (re.++ (re.* (str.to.re "-")) (re.++ (re.* (str.to.re " ")) (re.++ ((_ re.capture 5) (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.++ (re.range "0" "9") (re.range "0" "9"))))) (re.* (str.to.re " "))))))))) re.end-anchor)))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
