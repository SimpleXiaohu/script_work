
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor)))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor)) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor)) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor)))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor)) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor)) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor)))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor)) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ (re.++ re.begin-anchor ((_ re.capture 1) (re.union (re.++ (re.union (re.range "a" "z") (re.range "A" "z")) (re.++ (str.to.re ":") (re.++ ((_ re.capture 2) (re.union ((_ re.capture 3) (re.++ (str.to.re "(") (re.+ (re.union (str.to.re "-") (re.union (str.to.re "*") (re.union (str.to.re ".") (re.union (str.to.re "*") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))) (re.union (str.to.re "+") (re.union (re.union (str.to.re "\u{20}") (re.union (str.to.re "\u{0b}") (re.union (str.to.re "\u{0a}") (re.union (str.to.re "\u{0d}") (re.union (str.to.re "\u{09}") (str.to.re "\u{0c}")))))) (re.union (str.to.re "+") (re.union (re.range "0" "9") (str.to.re "+"))))))))))))) (re.++ ((_ re.capture 4) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_")))))) (re.+ (str.to.re ")"))))) ((_ re.capture 5) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "z") (re.++ (str.to.re "i") (str.to.re "p"))))))))) ((_ re.capture 6) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to.re "_"))))) (re.++ (re.range "\x01" "\xff") (re.++ (str.to.re "Z") (re.++ (str.to.re "I") (str.to.re "P"))))))))) re.end-anchor))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
