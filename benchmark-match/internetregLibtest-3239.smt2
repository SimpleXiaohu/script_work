
(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)

(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))))))))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))))))))) (str.to.re "\x00"))))
;match[1]!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))))))))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) ))
;/[a-z]+/.test(match[1]) == true
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))))))))))	; match!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))))))))) (str.to.re "\x00"))))	
;match[1]!==null
(assert (not (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))))))))) (re.++ re.all(re.+ (re.range "a" "z")) re.all) )))
;/[a-z]+/.test(match[1]) == false	
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))))))))))	; match!==null
(assert (str.in.re ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))))))))) (str.to.re "\x00")))
;match[1]==null
(check-sat)
(get-model)
(pop 1)
(push 1)
(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))
(assert (not (str.in.re var0 (re.++ re.begin-anchor (re.++ (re.* (re.range "\x01" "\xff")) ((_ re.capture 1) (re.++ (re.diff (re.range "\x01" "\xff") (str.to.re ".")) (re.++ (str.to.re ".") ((_ re.capture 2) (re.union (re.union (re.union (re.union ((_ re.capture 3) (re.++ (re.union (str.to.re "g") (str.to.re "G")) (re.++ (re.union (str.to.re "i") (str.to.re "I")) (re.union (re.++ (str.to.re "f") re.all) (re.++ (str.to.re "F") re.all))))) ((_ re.capture 4) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))) ((_ re.capture 5) (re.++ (re.union (str.to.re "J") (str.to.re "j")) (re.++ (re.union (str.to.re "p") (str.to.re "P")) (re.++ (re.union (str.to.re "E") (str.to.re "e")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all))))))) ((_ re.capture 6) (re.++ (re.union (str.to.re "B") (str.to.re "b")) (re.++ (re.union (str.to.re "m") (str.to.re "M")) (re.union (re.++ (str.to.re "p") re.all) (re.++ (str.to.re "P") re.all)))))) ((_ re.capture 7) (re.++ (re.union (str.to.re "P") (str.to.re "p")) (re.++ (re.union (str.to.re "n") (str.to.re "N")) (re.union (re.++ (str.to.re "G") re.all) (re.++ (str.to.re "g") re.all)))))))))))))))	; match == null
(check-sat)
(get-model)
(pop 1)
(exit)
