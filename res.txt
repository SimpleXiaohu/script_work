not consistent: ./len-2/regtest-650.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-650.js:
var x = "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^(([a-z]??))?/)[1])

./len-2/regtest-650.smt2:
;;^(([a-z]??))?

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) ((_ re.capture 2) (re.opt? (re.range "a" "z")))) re.all)) (re.++ (str.to.re "") re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) ((_ re.capture 2) (re.opt? (re.range "a" "z")))) re.all)) (re.++ (str.to.re "") re.all))))))

(assert (= var0 "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-183.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-183.js:
var x = "aaaaaaaaaa\u{1}"
console.log(x.match(/^([a-z]*?)?|[^A-Za-z0-9]/)[1])

./len-2/regtest-183.smt2:
;;^([a-z]*?)?|[^A-Za-z0-9]

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.union (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.*? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))) (re.++ (re.*? re.allchar) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.union (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.*? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))) (re.++ (re.*? re.allchar) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all))))))

(assert (= var0 "aaaaaaaaaa\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-544.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-544.js:
var x = "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]??)?/)[1])

./len-2/regtest-544.smt2:
;;^([a-z]??)?

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.opt? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.opt? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))))))

(assert (= var0 "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-1366.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-1366.js:
var x = "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^(([a-z]??)?)/)[1])

./len-2/regtest-1366.smt2:
;;^(([a-z]??)?)

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "") ((_ re.capture 2) (re.opt? (re.range "a" "z")))) (str.to.re ""))) re.all))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "") ((_ re.capture 2) (re.opt? (re.range "a" "z")))) (str.to.re ""))) re.all)))))

(assert (= var0 "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-1059.smt2, ostrichRes=aa, jsRes=aaaa
./js-benchmark/regtest-1059.js:
var x = "aaaaaaaa\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]{1,4}){1,4}/)[1])

./len-2/regtest-1059.smt2:
;;^([a-z]{1,4}){1,4}

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) re.all))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) re.all)))))

(assert (= var0 "aaaaaaaaaaaaaa\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-117.smt2, ostrichRes=aa, jsRes=aaa
./js-benchmark/regtest-117.js:
var x = "aaaaaaa\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]{1,4}){1,4}?[^A-Za-z0-9]/)[1])

./len-2/regtest-117.smt2:
;;^([a-z]{1,4}){1,4}?[^A-Za-z0-9]

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.loop? 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.loop? 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all))))))

(assert (= var0 "aaaaaaaaaa\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-105.smt2, ostrichRes=aa, jsRes=aaa
./js-benchmark/regtest-105.js:
var x = "aaaaaaa\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]{1,4}){1,4}[^A-Za-z0-9]/)[1])

./len-2/regtest-105.smt2:
;;^([a-z]{1,4}){1,4}[^A-Za-z0-9]

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all))))))

(assert (= var0 "aaaaaaaaaa\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-1177.smt2, ostrichRes=aa, jsRes=aaaa
./js-benchmark/regtest-1177.js:
var x = "aaaaaaaa\u{1}\u{1}\u{1}"
console.log(x.match(/^(([a-z]{1,4})){1,4}/)[1])

./len-2/regtest-1177.smt2:
;;^(([a-z]{1,4})){1,4}

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.capture 2) ((_ re.loop 1 4) (re.range "a" "z"))))) re.all))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.capture 2) ((_ re.loop 1 4) (re.range "a" "z"))))) re.all)))))

(assert (= var0 "aaaaaaaaaaaaaa\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-1417.smt2, ostrichRes=aaaaaaaaaaaaaa, jsRes=aaaaaaaa
./js-benchmark/regtest-1417.js:
var x = "aaaaaaaa\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^(([a-z]{1,4}){1,4})/)[1])

./len-2/regtest-1417.smt2:
;;^(([a-z]{1,4}){1,4})

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) ((_ re.loop 1 4) ((_ re.capture 2) ((_ re.loop 1 4) (re.range "a" "z"))))) re.all))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) ((_ re.loop 1 4) ((_ re.capture 2) ((_ re.loop 1 4) (re.range "a" "z"))))) re.all)))))

(assert (= var0 "aaaaaaaaaaaaaa\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-648.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-648.js:
var x = "aaaaaaaaaa\u{1}"
console.log(x.match(/^(([a-z]*?))?/)[1])

./len-2/regtest-648.smt2:
;;^(([a-z]*?))?

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) ((_ re.capture 2) (re.*? (re.range "a" "z")))) re.all)) (re.++ (str.to.re "") re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) ((_ re.capture 2) (re.*? (re.range "a" "z")))) re.all)) (re.++ (str.to.re "") re.all))))))

(assert (= var0 "aaaaaaaaaa\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-1071.smt2, ostrichRes=aa, jsRes=aaaa
./js-benchmark/regtest-1071.js:
var x = "aaaaaaaa\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]{1,4}){1,4}/)[1])

./len-2/regtest-1071.smt2:
;;^([a-z]{1,4}){1,4}

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) re.all))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) re.all)))))

(assert (= var0 "aaaaaaaaaaaaaa\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-584.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-584.js:
var x = "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]??)?/)[1])

./len-2/regtest-584.smt2:
;;^([a-z]??)?

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.opt? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.opt? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))))))

(assert (= var0 "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-185.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-185.js:
var x = "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]??)?|[^A-Za-z0-9]/)[1])

./len-2/regtest-185.smt2:
;;^([a-z]??)?|[^A-Za-z0-9]

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.union (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.opt? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))) (re.++ (re.*? re.allchar) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.union (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.opt? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))) (re.++ (re.*? re.allchar) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all))))))

(assert (= var0 "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-532.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-532.js:
var x = "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]??)?/)[1])

./len-2/regtest-532.smt2:
;;^([a-z]??)?

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.opt? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.opt? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))))))

(assert (= var0 "a\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-542.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-542.js:
var x = "aaaaaaaaaa\u{1}"
console.log(x.match(/^([a-z]*?)?/)[1])

./len-2/regtest-542.smt2:
;;^([a-z]*?)?

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.*? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.*? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))))))

(assert (= var0 "aaaaaaaaaa\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-1364.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-1364.js:
var x = "aaaaaaaaaa\u{1}"
console.log(x.match(/^(([a-z]*?)?)/)[1])

./len-2/regtest-1364.smt2:
;;^(([a-z]*?)?)

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "") ((_ re.capture 2) (re.*? (re.range "a" "z")))) (str.to.re ""))) re.all))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.++ ((_ re.capture 1) (re.union (re.++ (str.to.re "") ((_ re.capture 2) (re.*? (re.range "a" "z")))) (str.to.re ""))) re.all)))))

(assert (= var0 "aaaaaaaaaa\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-530.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-530.js:
var x = "aaaaaaaaaa\u{1}"
console.log(x.match(/^([a-z]*?)?/)[1])

./len-2/regtest-530.smt2:
;;^([a-z]*?)?

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.*? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.*? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))))))

(assert (= var0 "aaaaaaaaaa\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-562.smt2, ostrichRes=, jsRes=a
./js-benchmark/regtest-562.js:
var x = "aaaaaaaaaa\u{1}"
console.log(x.match(/^([a-z]*?)?/)[1])

./len-2/regtest-562.smt2:
;;^([a-z]*?)?

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.*? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.++ re.begin-anchor (re.union (re.++ (str.to.re "") (re.++ ((_ re.capture 1) (re.*? (re.range "a" "z"))) re.all)) (re.++ (str.to.re "") re.all))))))

(assert (= var0 "aaaaaaaaaa\u{1}"))

(check-sat)
(get-model)

------------------------------------------
not consistent: ./len-2/regtest-236.smt2, ostrichRes=aaa, jsRes=aaaa
./js-benchmark/regtest-236.js:
var x = "aaaaaaaa\u{1}\u{1}\u{1}"
console.log(x.match(/^([a-z]{1,4}){1,4}|[^A-Za-z0-9]/)[1])

./len-2/regtest-236.smt2:
;;^([a-z]{1,4}){1,4}|[^A-Za-z0-9]

(set-option :produce-models true)
(set-option :inline-size-limit 10000)

(declare-const var0 String)
(declare-const res String)

(assert (str.in.re var0 (re.* (re.range "\x01" "\xff"))))

(assert (str.in.re var0 (re.union (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) re.all)) (re.++ (re.*? re.allchar) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all)))))

(assert (= res ((_ str.extract 1) var0 (re.union (re.++ re.begin-anchor (re.++ ((_ re.loop 1 4) ((_ re.capture 1) ((_ re.loop 1 4) (re.range "a" "z")))) re.all)) (re.++ (re.*? re.allchar) (re.++ (re.inter (re.diff (re.range "\x01" "\xff") (re.range "A" "Z")) (re.inter (re.diff (re.range "\x01" "\xff") (re.range "a" "z")) (re.diff (re.range "\x01" "\xff") (re.range "0" "9")))) re.all))))))

(assert (= var0 "aaaaaaa\u{1}\u{1}\u{1}\u{1}"))

(check-sat)
(get-model)

------------------------------------------
